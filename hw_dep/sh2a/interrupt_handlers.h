/***************************************************************/
/*                                                             */
/*      PROJECT NAME :  sh2alib                                */
/*      FILE         :  interrupt_handlers.h                   */
/*      DESCRIPTION  :  Interrupt Handler Declarations         */
/*      CPU SERIES   :  SH2a                                   */
/*      CPU TYPE     :  SH7262                                 */
/*                                                             */
/*      This file is generated by e2 studio.                   */
/*                                                             */
/***************************************************************/

/************************************************************************/
/*    File Version: V1.00                                               */
/*    Date Generated: 08/07/2013                                        */
/************************************************************************/

#ifndef INTERRUPT_HANDLERS_H
#define INTERRUPT_HANDLERS_H

//#define __INTFUNC   __attribute__((interrupt_handler))
#define __INTFUNC

//<<VECTOR DATA START (POWER ON RESET)>>
// ;0 Power On Reset PC                                                                                                            

// ;<<VECTOR DATA END (POWER ON RESET)>>
// 1 Power On Reset SP

//;<<VECTOR DATA START (MANUAL RESET)>>
//;2 Manual Reset PC
void INT_Manual_Reset_PC(void) __INTFUNC;

//;<<VECTOR DATA END (MANUAL RESET)>>
// 3 Manual Reset SP
void INT_Manual_Reset_SP(void) __INTFUNC;

// 4 Illegal code

void INT_Illegal_code(void) __INTFUNC;

// 5 Reserved

// 6 Illegal slot
void INT_Illegal_slot(void) __INTFUNC;

// 7 Reserved

// 8 Reserved

// 9 CPU Address error
void INT_CPU_Address(void) __INTFUNC;

// 10 BUS error
void INT_DMAC_Address(void) __INTFUNC;

// 11 NMI
void INT_NMI(void) __INTFUNC;

// 12 Reserved

// 13 INT_FPU
void INT_FPU(void) __INTFUNC;

// 14 H-UDI
void INT_HUDI(void) __INTFUNC;

// 15 Bank Overflow
void INT_Bank_Overflow(void) __INTFUNC;

// 16 Bank Underflow
void INT_Bank_Underflow(void) __INTFUNC;

// 17 Divide by zero
void INT_Divide_by_Zero(void) __INTFUNC;

// 18 Divide Overflow
void INT_Divide_Overflow(void) __INTFUNC;

// 19 Reserved

// 20 Reserved

// 21 Reserved

// 22 Reserved

// 23 Reserved

// 24 Reserved

// 25 Reserved

// 26 Reserved

// 27 Reserved

// 28 Reserved

// 29 Reserved

// 30 Reserved

// 31 Reserved

// 32 TRAPA (User Vecter)
void INT_TRAPA32(void) __INTFUNC;

// 33 TRAPA (User Vecter)
void INT_TRAPA33(void) __INTFUNC;

// 34 TRAPA (User Vecter)
void INT_TRAPA34(void) __INTFUNC;

// 35 TRAPA (User Vecter)
void INT_TRAPA35(void) __INTFUNC;

// 36 TRAPA (User Vecter)
void INT_TRAPA36(void) __INTFUNC;

// 37 TRAPA (User Vecter)
void INT_TRAPA37(void) __INTFUNC;

// 38 TRAPA (User Vecter)
void INT_TRAPA38(void) __INTFUNC;

// 39 TRAPA (User Vecter)
void INT_TRAPA39(void) __INTFUNC;

// 40 TRAPA (User Vecter)
void INT_TRAPA40(void) __INTFUNC;

// 41 TRAPA (User Vecter)
void INT_TRAPA41(void) __INTFUNC;

// 42 TRAPA (User Vecter)
void INT_TRAPA42(void) __INTFUNC;

// 43 TRAPA (User Vecter)
void INT_TRAPA43(void) __INTFUNC;

// 44 TRAPA (User Vecter)
void INT_TRAPA44(void) __INTFUNC;

// 45 TRAPA (User Vecter)
void INT_TRAPA45(void) __INTFUNC;

// 46 TRAPA (User Vecter)
void INT_TRAPA46(void) __INTFUNC;

// 47 TRAPA (User Vecter)
void INT_TRAPA47(void) __INTFUNC;

// 48 TRAPA (User Vecter)
void INT_TRAPA48(void) __INTFUNC;

// 49 TRAPA (User Vecter)
void INT_TRAPA49(void) __INTFUNC;

// 50 TRAPA (User Vecter)
void INT_TRAPA50(void) __INTFUNC;

// 51 TRAPA (User Vecter)
void INT_TRAPA51(void) __INTFUNC;

// 52 TRAPA (User Vecter)
void INT_TRAPA52(void) __INTFUNC;

// 53 TRAPA (User Vecter)
void INT_TRAPA53(void) __INTFUNC;

// 54 TRAPA (User Vecter)
void INT_TRAPA54(void) __INTFUNC;

// 55 TRAPA (User Vecter)
void INT_TRAPA55(void) __INTFUNC;

// 56 TRAPA (User Vecter)
void INT_TRAPA56(void) __INTFUNC;

// 57 TRAPA (User Vecter)
void INT_TRAPA57(void) __INTFUNC;

// 58 TRAPA (User Vecter)
void INT_TRAPA58(void) __INTFUNC;

// 59 TRAPA (User Vecter)
void INT_TRAPA59(void) __INTFUNC;

// 60 TRAPA (User Vecter)
void INT_TRAPA60(void) __INTFUNC;

// 61 TRAPA (User Vecter)
void INT_TRAPA61(void) __INTFUNC;

// 62 TRAPA (User Vecter)
void INT_TRAPA62(void) __INTFUNC;

// 63 TRAPA (User Vecter)
void INT_TRAPA63(void) __INTFUNC;

// 64 Interrupt IRQ0
void INT_IRQ_IRQ0(void) __INTFUNC;

// 65 Interrupt IRQ1
void INT_IRQ_IRQ1(void) __INTFUNC;

// 66 Interrupt IRQ2
void INT_IRQ_IRQ2(void) __INTFUNC;

// 67 Interrupt IRQ3
void INT_IRQ_IRQ3(void) __INTFUNC;

// 68 Interrupt IRQ4
void INT_IRQ_IRQ4(void) __INTFUNC;

// 69 Interrupt IRQ5
void INT_IRQ_IRQ5(void) __INTFUNC;

// 70 Interrupt IRQ6
void INT_IRQ_IRQ6(void) __INTFUNC;

// 71 Interrupt IRQ7
void INT_IRQ_IRQ7(void) __INTFUNC;

// 72 Reserved

// 73 Reserved

// 74 Reserved

// 75 Reserved

// 76 Reserved

// 77 Reserved

// 78 Reserved

// 79 Reserved

// 80 Interrupt PINT0
void INT_PINT_PINT0(void) __INTFUNC;

// 81 Interrupt PINT1
void INT_PINT_PINT1(void) __INTFUNC;

// 82 Interrupt PINT2
void INT_PINT_PINT2(void) __INTFUNC;

// 83 Interrupt PINT3
void INT_PINT_PINT3(void) __INTFUNC;

// 84 Interrupt PINT4
void INT_PINT_PINT4(void) __INTFUNC;

// 85 Interrupt PINT5
void INT_PINT_PINT5(void) __INTFUNC;

// 86 Interrupt PINT6
void INT_PINT_PINT6(void) __INTFUNC;

// 87 Interrupt PINT7
void INT_PINT_PINT7(void) __INTFUNC;

// 88 Reserved

// 89 Reserved

// 90 Reserved

// 91 Reserved

// 92 Reserved

// 93 Reserved

// 94 Reserved

// 95 Reserved

// 96 Reserved

// 97 Reserved

// 98 Reserved

// 99 Reserved

// 100 Reserved

// 101 Reserved

// 102 Reserved

// 103 Reserved

// 104 Reserved

// 105 Reserved

// 106 Reserved

// 107 Reserved

// 108 DMAC0 DEI0
void INT_DMAC0_DEI0(void) __INTFUNC;

// 109 DMAC0 HEI0
void INT_DMAC0_HEI0(void) __INTFUNC;

// 110 Reserved

// 111 Reserved

// 112 DMAC1 DEI1
void INT_DMAC1_DEI1(void) __INTFUNC;

// 113 DMAC1 HEI1
void INT_DMAC1_HEI1(void) __INTFUNC;

// 114 Reserved

// 115 Reserved

// 116 DMAC2 DEI2
void INT_DMAC2_DEI2(void) __INTFUNC;

// 117 DMAC2 HEI2
void INT_DMAC2_HEI2(void) __INTFUNC;

// 118 Reserved

// 119 Reserved

// 120 DMAC3 DEI3
void INT_DMAC3_DEI3(void) __INTFUNC;

// 121 DMAC3 HEI3
void INT_DMAC3_HEI3(void) __INTFUNC;

// 122 Reserved

// 123 Reserved

// 124 DMAC4 DEI4
void INT_DMAC4_DEI4(void) __INTFUNC;

// 125 DMAC4 HEI4
void INT_DMAC4_HEI4(void) __INTFUNC;

// 126 Reserved

// 127 Reserved

// 128 DMAC5 DEI5
void INT_DMAC5_DEI5(void) __INTFUNC;

// 129 DMAC5 HEI5
void INT_DMAC5_HEI5(void) __INTFUNC;

// 130 Reserved

// 131 Reserved

// 132 DMAC6 DEI6
void INT_DMAC6_DEI6(void) __INTFUNC;

// 133 DMAC6 HEI6
void INT_DMAC6_HEI6(void) __INTFUNC;

// 134 Reserved

// 135 Reserved

// 136 DMAC7 DEI7
void INT_DMAC7_DEI7(void) __INTFUNC;

// 137 DMAC7 HEI7
void INT_DMAC7_HEI7(void) __INTFUNC;

// 138 Reserved

// 139 Reserved

// 140 DMAC8 DEI8
void INT_DMAC8_DEI8(void) __INTFUNC;

// 141 DMAC8 HEI8
void INT_DMAC8_HEI8(void) __INTFUNC;

// 142 Reserved

// 143 Reserved

// 144 DMAC9 DEI9
void INT_DMAC9_DEI9(void) __INTFUNC;

// 145 DMAC9 HEI9
void INT_DMAC9_HEI9(void) __INTFUNC;

// 146 Reserved

// 147 Reserved

// 148 DMAC10 DEI10
void INT_DMAC10_DEI10(void) __INTFUNC;

// 149 DMAC10 HEI10
void INT_DMAC10_HEI10(void) __INTFUNC;

// 150 Reserved

// 151 Reserved

// 152 DMAC11 DEI11
void INT_DMAC11_DEI11(void) __INTFUNC;

// 153 DMAC11 HEI11
void INT_DMAC11_HEI11(void) __INTFUNC;

// 154 Reserved

// 155 Reserved

// 156 DMAC12 DEI12
void INT_DMAC12_DEI12(void) __INTFUNC;

// 157 DMAC12 HEI12
void INT_DMAC12_HEI12(void) __INTFUNC;

// 158 Reserved

// 159 Reserved

// 160 DMAC13 DEI13
void INT_DMAC13_DEI13(void) __INTFUNC;

// 161 DMAC13 HEI13
void INT_DMAC13_HEI13(void) __INTFUNC;

// 162 Reserved

// 163 Reserved

// 164 DMAC14 DEI14
void INT_DMAC14_DEI14(void) __INTFUNC;

// 165 DMAC14 HEI14
void INT_DMAC14_HEI14(void) __INTFUNC;

// 166 Reserved

// 167 Reserved

// 168 DMAC15 DEI15
void INT_DMAC15_DEI15(void) __INTFUNC;

// 169 DMAC15 HEI15
void INT_DMAC15_HEI15(void) __INTFUNC;

// 170 USB USBI
void INT_USB_USBI(void) __INTFUNC;

// 171 VDC3 VIVSYNCJ
void INT_VDC3_VIVSYNCJ(void) __INTFUNC;

// 172 VDC3 VBUFERRJ
void INT_VDC3_VBUFERR(void) __INTFUNC;

// 173 VDC3 VIFIELDE
void INT_VDC3_VIFIELDE(void) __INTFUNC;

// 174 VDC3 VOLINE
void INT_VDC3_VOLINE(void) __INTFUNC;

// 175 CMT CMT0 CMI0
void INT_CMT0_CMI0(void) __INTFUNC;

// 176 CMT CMT1 CMI1
void INT_CMT1_CMI1(void) __INTFUNC;

// 177 BSC CMI
void INT_BSC_CMI(void) __INTFUNC;

// 178 WDT
void INT_WDT_ITI(void) __INTFUNC;

// 179 MTU2 MTU0 TGI0A
void INT_MTU2_TGI0A(void) __INTFUNC;

// 180 MTU2 MTU0 TGI0B
void INT_MTU2_TGI0B(void) __INTFUNC;

// 181 MTU2 MTU0 TGI0C
void INT_MTU2_TGI0C(void) __INTFUNC;

// 182 MTU2 MTU0 TGI0D
void INT_MTU2_TGI0D(void) __INTFUNC;

// 183 MTU2 MTU0 TCI0V
void INT_MTU2_TCI0V(void) __INTFUNC;

// 184 MTU2 MTU0 TGI0E
void INT_MTU2_TGI0E(void) __INTFUNC;

// 185 MTU2 MTU0 TGI0F
void INT_MTU2_TGI0F(void) __INTFUNC;

// 186 MTU2 MTU1 TGI1A
void INT_MTU2_TGI1A(void) __INTFUNC;

// 187 MTU2 MTU1 TGI1B
void INT_MTU2_TGI1B(void) __INTFUNC;

// 188 MTU2 MTU1 TCI1V
void INT_MTU2_TCI1V(void) __INTFUNC;

// 189 MTU2 MTU1 TCI1U
void INT_MTU2_TCI1U(void) __INTFUNC;

// 190 MTU2 MTU2 TGI2A
void INT_MTU2_TGI2A(void) __INTFUNC;

// 191 MTU2 MTU2 TGI2B
void INT_MTU2_TGI2B(void) __INTFUNC;

// 192 MTU2 MTU2 TCI2V
void INT_MTU2_TCI2V(void) __INTFUNC;

// 193 MTU2 MTU2 TCI2U
void INT_MTU2_TCI2U(void) __INTFUNC;

// 194 MTU2 MTU3 TGI3A
void INT_MTU2_TGI3A(void) __INTFUNC;

// 195 MTU2 MTU3 TGI3B
void INT_MTU2_TGI3B(void) __INTFUNC;

// 196 MTU2 MTU3 TGI3C
void INT_MTU2_TGI3C(void) __INTFUNC;

// 197 MTU2 MTU3 TGI3D
void INT_MTU2_TGI3D(void) __INTFUNC;

// 198 MTU2 MTU3 TCI3V
void INT_MTU2_TCI3V(void) __INTFUNC;

// 199 MTU2 MTU4 TGI4A
void INT_MTU2_TGI4A(void) __INTFUNC;

// 200 MTU2 MTU4 TGI4B
void INT_MTU2_TGI4B(void) __INTFUNC;

// 201 MTU2 MTU4 TGI4C
void INT_MTU2_TGI4C(void) __INTFUNC;

// 202 MTU2 MTU4 TGI4D
void INT_MTU2_TGI4D(void) __INTFUNC;

// 203 MTU2 MTU4 TCI4V
void INT_MTU2_TCI4V(void) __INTFUNC;

// 204 PWM PWM1 
void INT_PWM1(void) __INTFUNC;

// 205 PWM PWM2
void INT_PWM2(void) __INTFUNC;

// 206 A/D ADI
void INT_AD_ADI(void) __INTFUNC;

// 207 SSI0 SSIF0
void INT_SSI0_SSIF0(void) __INTFUNC;

// 208 SSI0 SSIRXI0
void INT_SSI0_SSIRXI0(void) __INTFUNC;

// 209 SSI0 SSITXI0
void INT_SSI0_SSITXI0(void) __INTFUNC;

// 210 SSI1 SSII1
void INT_SSI1_SSII1(void) __INTFUNC;

// 211 SSI1 SSIRTI1
void INT_SSI1_SSIRTI1(void) __INTFUNC;

// 212 SSI2 SSII2
void INT_SSI2_SSII2(void) __INTFUNC;

// 213 SSI2 SSIRTI2
void INT_SSI2_SSIRTI2(void) __INTFUNC;

// 214 SSI3 SSII3
void INT_SSI3_SSII3(void) __INTFUNC;

// 215 SSI3 SSIRTI3
void INT_SSI3_SSIRTI3(void) __INTFUNC;

// 216 SPDIF SPDIFI
void INT_SPDIF_SPDIFI(void) __INTFUNC;

// 217 IIC3 IIC0 STPI0
void INT_IIC3_STPI0(void) __INTFUNC;

// 218 IIC3 IIC0 NAKI0
void INT_IIC3_NAKI0(void) __INTFUNC;

// 219 IIC3 IIC0 RXI0
void INT_IIC3_RXI0(void) __INTFUNC;

// 220 IIC3 IIC0 TXI0
void INT_IIC3_TXI0(void) __INTFUNC;

// 221 IIC3 IIC0 TEI0
void INT_IIC3_TEI0(void) __INTFUNC;

// 222 IIC3 IIC1 STPI1
void INT_IIC3_STPI1(void) __INTFUNC;

// 223 IIC3 IIC1 NAKI1
void INT_IIC3_NAKI1(void) __INTFUNC;

// 224 IIC3 IIC1 RXI1
void INT_IIC3_RXI1(void) __INTFUNC;

// 225 IIC3 IIC1 TXI1
void INT_IIC3_TXI1(void) __INTFUNC;

// 226 IIC3 IIC1 TEI1
void INT_IIC3_TEI1(void) __INTFUNC;

// 227 IIC3 IIC2 STPI2
void INT_IIC3_STPI2(void) __INTFUNC;

// 228 IIC3 IIC2 NAKI2
void INT_IIC3_NAKI2(void) __INTFUNC;

// 229 IIC3 IIC2 RXI2
void INT_IIC3_RXI2(void) __INTFUNC;

// 230 IIC3 IIC2 TXI2
void INT_IIC3_TXI2(void) __INTFUNC;

// 231 IIC3 IIC2 TEI2
void INT_IIC3_TEI2(void) __INTFUNC;

// 232 SCIF SCIF0 BRI0
void INT_SCIF0_BRI0(void) __INTFUNC;

// 233 SCIF SCIF0 ERI0
void INT_SCIF0_ERI0(void) __INTFUNC;

// 234 SCIF SCIF0 RXI0
void INT_SCIF0_RXI0(void) __INTFUNC;

// 235 SCIF SCIF0 TXI0
void INT_SCIF0_TXI0(void) __INTFUNC;

// 236 SCIF SCIF1 BRI1
void INT_SCIF1_BRI1(void) __INTFUNC;

// 237 SCIF SCIF1 ERI1
void INT_SCIF1_ERI1(void) __INTFUNC;

// 238 SCIF SCIF1 RXI1
void INT_SCIF1_RXI1(void) __INTFUNC;

// 239 SCIF SCIF1 TXI1
void INT_SCIF1_TXI1(void) __INTFUNC;

// 240 SCIF SCIF2 BRI2
void INT_SCIF2_BRI2(void) __INTFUNC;

// 241 SCIF SCIF2 ERI2
void INT_SCIF2_ERI2(void) __INTFUNC;

// 242 SCIF SCIF2 RXI2
void INT_SCIF2_RXI2(void) __INTFUNC;

// 243 SCIF SCIF2 TXI2
void INT_SCIF2_TXI2(void) __INTFUNC;

// 244 SCIF SCIF3 BRI3
void INT_SCIF3_BRI3(void) __INTFUNC;

// 245 SCIF SCIF3 ERI3
void INT_SCIF3_ERI3(void) __INTFUNC;

// 246 SCIF SCIF3 RXI3
void INT_SCIF3_RXI3(void) __INTFUNC;

// 247 SCIF SCIF3 TXI3
void INT_SCIF3_TXI3(void) __INTFUNC;

// 248 SCIF SCIF4 BRI4
void INT_SCIF4_BRI4(void) __INTFUNC;

// 249 SCIF SCIF4 ERI4
void INT_SCIF4_ERI4(void) __INTFUNC;

// 250 SCIF SCIF4 RXI4
void INT_SCIF4_RXI4(void) __INTFUNC;

// 251 SCIF SCIF4 TXI4
void INT_SCIF4_TXI4(void) __INTFUNC;

// 252 SCIF SCIF5 BRI5
void INT_SCIF5_BRI5(void) __INTFUNC;

// 253 SCIF SCIF5 ERI5
void INT_SCIF5_ERI5(void) __INTFUNC;

// 254 SCIF SCIF5 RXI5
void INT_SCIF5_RXI5(void) __INTFUNC;

// 255 SCIF SCIF5 TXI5
void INT_SCIF5_TXI5(void) __INTFUNC;

// 256 SCIF SCIF6 BRI6
void INT_SCIF6_BRI6(void) __INTFUNC;

// 257 SCIF SCIF6 ERI6
void INT_SCIF6_ERI6(void) __INTFUNC;

// 258 SCIF SCIF6 RXI6
void INT_SCIF6_RXI6(void) __INTFUNC;

// 259 SCIF SCIF6 TXI6
void INT_SCIF6_TXI6(void) __INTFUNC;

// 260 SCIF SCIF7 BRI7
void INT_SCIF7_BRI7(void) __INTFUNC;

// 261 SCIF SCIF7 ERI7
void INT_SCIF7_ERI7(void) __INTFUNC;

// 262 SCIF SCIF7 RXI7
void INT_SCIF7_RXI7(void) __INTFUNC;

// 263 SCIF SCIF7 TXI7
void INT_SCIF7_TXI7(void) __INTFUNC;

// 264 SIOF SIOFI
void INT_SIOF_SIOFI(void) __INTFUNC;

// 265 RSPI RSPI0 SPEI0
void INT_RSPI0_SPEI0(void) __INTFUNC;

// 266 RSPI RSPI0 SPRI0
void INT_RSPI0_SPRI0(void) __INTFUNC;

// 267 RSPI RSPI0 SPTI0
void INT_RSPI0_SPTI0(void) __INTFUNC;

// 268 RSPI RSPI1 SPEI1
void INT_RSPI1_SPEI1(void) __INTFUNC;

// 269 RSPI RSPI1 SPRI1
void INT_RSPI1_SPRI1(void) __INTFUNC;

// 270 RSPI RSPI1 SPTI1
void INT_RSPI1_SPTI1(void) __INTFUNC;

// 271 RCAN RCAN0 ERS0 
void INT_RCAN0_ERS0(void) __INTFUNC;

// 272 RCAN RCAN0 OVR0 
void INT_RCAN0_OVR0(void) __INTFUNC;

// 273 RCAN RCAN0 RM00 
void INT_RCAN0_RM00(void) __INTFUNC;

// 274 RCAN RCAN0 RM10 
void INT_RCAN0_RM10(void) __INTFUNC;

// 275 RCAN RCAN0 SLE0 
void INT_RCAN0_SLE0(void) __INTFUNC;

// 276 RCAN RCAN1 ERS1 
void INT_RCAN1_ERS1(void) __INTFUNC;

// 277 RCAN RCAN1 OVR1 
void INT_RCAN1_OVR1(void) __INTFUNC;

// 278 RCAN RCAN1 RM01 
void INT_RCAN1_RM01(void) __INTFUNC;

// 279 RCAN RCAN1 RM11 
void INT_RCAN1_RM11(void) __INTFUNC;

// 280 RCAN RCAN1 SLE1 
void INT_RCAN1_SLE1(void) __INTFUNC;

// 281 IEB IEB 
void INT_IEB_IEB(void) __INTFUNC;

// 282 ROMDEC ISY 
void INT_ROMDEC_ISY(void) __INTFUNC;

// 283 ROMDEC IERR 
void INT_ROMDEC_IERR(void) __INTFUNC;

// 284 ROMDEC ITARG 
void INT_ROMDEC_ITARG(void) __INTFUNC;

// 285 ROMDEC ISEC 
void INT_ROMDEC_ISEC(void) __INTFUNC;

// 286 ROMDEC IBUF 
void INT_ROMDEC_IBUF(void) __INTFUNC;

// 287 ROMDEC IREADY 
void INT_ROMDEC_IREADY(void) __INTFUNC;

// 288 FLCTL FLSTEI 
void INT_FLCTL_FLSTEI(void) __INTFUNC;

// 289 FLCTL FLTENDI 
void INT_FLCTL_FLTENDI(void) __INTFUNC;

// 290 FLCTL FLTREQ0I 
void INT_FLCTL_FLTREQ0I(void) __INTFUNC;

// 291 FLCTL FLTREQ1I 
void INT_FLCTL_FLTREQ1I(void) __INTFUNC;

// 292 SDHI SDHI3 
void INT_SDHI_SDHI3(void) __INTFUNC;

// 293 SDHI SDHI0 
void INT_SDHI_SDHI0(void) __INTFUNC;

// 294 SDHI SDHI1 
void INT_SDHI_SDHI1(void) __INTFUNC;

// 295 Reserved

// 296 RTC ARM 
void INT_RTC_ARM(void) __INTFUNC;

// 297 RTC PRD 
void INT_RTC_PRD(void) __INTFUNC;

// 298 RTC CUP 
void INT_RTC_CUP(void) __INTFUNC;

// 299 SRC SRC0 OVF0 
void INT_SRC0_OVF0(void) __INTFUNC;

// 300 SRC SRC0 UDF0 
void INT_SRC0_UDF0(void) __INTFUNC;

// 301 SRC SRC0 CEF0 
void INT_SRC0_CEF0(void) __INTFUNC;

// 302 SRC SRC0 ODFI0 
void INT_SRC0_ODFI0(void) __INTFUNC;

// 303 SRC SRC0 IDEI0 
void INT_SRC0_IDEI0(void) __INTFUNC;

// 304 SRC SRC1 OVF1 
void INT_SRC1_OVF1(void) __INTFUNC;

// 305 SRC SRC1 UDF1 
void INT_SRC1_UDF1(void) __INTFUNC;

// 306 SRC SRC1 CEF1 
void INT_SRC1_CEF1(void) __INTFUNC;

// 307 SRC SRC1 ODFI1 
void INT_SRC1_ODFI1(void) __INTFUNC;

// 308 SRC SRC1 IDEI1 
void INT_SRC1_IDEI1(void) __INTFUNC;

// 309 Reserved

// 310 DCU DCUEI 
void INT_DCU_DCUEI(void) __INTFUNC;

// 311 DCU OFFI 
void INT_DCU_OFFI(void) __INTFUNC;

// 312 DCU IFEI 
void INT_DCU_IFEI(void) __INTFUNC;

void Dummy(void) __INTFUNC;

#endif 
/* End of File */
